{"version":3,"sources":["utils/BooksAPI.js","components/BookHandler.js","components/Books.js","components/Bookshelf.js","components/Bookshelves.js","components/FindBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","BookHandler","PropTypes","array","isRequired","onChangeShelf","func","_this$props","this","props","currentShelf","_arr","entries","_i","length","_ref3","value","slicedToArray","react_default","a","createElement","key","className","defaultValue","onChange","event","target","disabled","Component","Books","bookCover","imageLinks","thumbnail","style","backgroundImage","components_BookHandler","title","authors","Bookshelf","lable","map","index","filter","components_Books","Bookshelves","components_Bookshelf","FindBooks","booksToAdd","state","updateQuery","_this","setState","trim","searchBooks","BooksAPI","sort","sortBy","Link","to","type","placeholder","autoFocus","App","moveToShelf","targetBook","prevState","_this2","_this3","Route","path","exact","render","components_Bookshelves","components_FindBooks","ReactDOM","BrowserRouter","src_App_0","document","getElementById"],"mappings":"sQACMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACdC,OAAU,mBACVC,cAAiBR,GAaNS,EAAS,SAACC,EAAMC,GAAP,OACpBC,MAAK,GAAAC,OAAId,EAAJ,WAAAc,OAAiBH,EAAKI,IAAM,CAC/BC,OAAQ,MACRT,QAAQU,OAAAC,EAAA,EAAAD,CAAA,GACHV,EADE,CAELY,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEV,YACtBW,KAAK,SAAAC,GAAG,OAAIA,EAAIC,UAERC,EAAS,SAACC,GAAD,OACpBd,MAAK,GAAAC,OAAId,EAAJ,WAAkB,CACrBgB,OAAQ,OACRT,QAAQU,OAAAC,EAAA,EAAAD,CAAA,GACHV,EADE,CAELY,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEK,YACtBJ,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAK,GAAI,OAAIA,EAAKC,iCCgBRC,6MAlDXC,UAAY,CACRpB,KAAMoB,IAAUC,MAAMC,WACtBJ,MAAOE,IAAUC,MAAMC,WACvBC,cAAeH,IAAUI,KAAKF,oFAW9B,IARI,IAAAG,EACmCC,KAAKC,MAApC3B,EADJyB,EACIzB,KAAMkB,EADVO,EACUP,MAAOK,EADjBE,EACiBF,cAKjBK,EAAe,OANfC,EAQoBvB,OAAOwB,QAAQZ,GAAvCa,EAAA,EAAAA,EAAAF,EAAAG,OAAAD,IAA+C,KAAAE,EAAAJ,EAAAE,GAAjCG,EAAiC5B,OAAA6B,EAAA,EAAA7B,CAAA2B,EAAA,MAEtCC,EAAM9B,KAAOJ,EAAKI,KAEnBwB,EAAeM,EAAMjC,OAI7B,OACImC,EAAAC,EAAAC,cAAA,OAAKC,IAAKvC,EAAKI,IACXgC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,kBAAkBC,aAAcb,EAAcc,SAAW,SAAAC,GAAK,OAAIpB,EAAevB,EAAM2C,EAAMC,OAAOV,SAClHE,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,OAAOW,UAAQ,GAA7B,cACAT,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,oBAAd,qBACAE,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,cAAd,gBACAE,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,QAAd,QAGqB,SAAjBN,GACAQ,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,QAAd,qBAxCFY,aCuCXC,6MAhCX3B,UAAY,CACRpB,KAAMoB,IAAUC,MAAMC,WACtBJ,MAAOE,IAAUC,MAAMC,WACvBC,cAAeH,IAAUI,KAAKF,oFAGzB,IAAAG,EAE2BC,KAAKC,MAA7B3B,EAFHyB,EAEGzB,KAAOuB,EAFVE,EAEUF,cACRL,EAASQ,KAAKC,MAAdT,MAGD8B,EAAYhD,EAAKiD,WAAajD,EAAKiD,WAAWC,UAAY,iCAEhE,OACId,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAEXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAAaW,MAAQ,CAChCC,gBAAe,OAAAjD,OAAS6C,EAAT,QAEnBZ,EAAAC,EAAAC,cAACe,EAAD,CAAarD,KAAMA,EAAMkB,MAAOA,EAAOK,cAAeA,KAE1Da,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAAcxC,EAAKsD,OAClClB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAgBxC,EAAKuD,kBA/BpCT,aCkDLU,6MA5CXpC,UAAY,CACRF,MAAOE,IAAUC,MAAMC,WACvBC,cAAeH,IAAUI,KAAKF,oFAK9B,IAFIG,EAQ8BC,KAAKC,MAA/BT,EARJO,EAQIP,MAAOK,EARXE,EAQWF,cAEf,OACIa,EAAAC,EAAAC,cAAA,WATa,CACb,CAACrC,MAAO,mBAAoBwD,MAAO,qBACnC,CAACxD,MAAO,aAAcwD,MAAO,gBAC7B,CAACxD,MAAO,OAAQwD,MAAO,iBAOPC,IAAM,SAACzD,EAAO0D,GAAR,OACdvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAYD,IAAKoB,GAC5BvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBAAd,IAAkCvC,EAAMwD,MAAxC,KACArB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACXJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACTtB,EACI0C,OAAQ,SAAC5D,GAAD,OAAUA,EAAKC,QAAUA,EAAMA,QACvCyD,IAAK,SAAC1D,GAAD,OACFoC,EAAAC,EAAAC,cAAA,OAAKC,IAAKvC,EAAKI,IACXgC,EAAAC,EAAAC,cAACuB,EAAD,CACI3C,MAAOA,EACPlB,KAAMA,EACNuC,IAAKvC,EAAKI,GACVmB,cAAeA,qBArC3CuB,aC8BTgB,6MAxBX1C,UAAY,CACRF,MAAOE,IAAUC,MAAMC,WACvBC,cAAeH,IAAUI,KAAKF,oFAG1B,IAAAG,EAE6BC,KAAKC,MAA9BT,EAFJO,EAEIP,MAAOK,EAFXE,EAEWF,cAEf,OACIa,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACXJ,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACXJ,EAAAC,EAAAC,cAACyB,EAAD,CAAW7C,MAAOA,EAAOK,cAAeA,cAtBtCuB,sDC8FXkB,6MArFX5C,UAAY,CACRF,MAAOE,IAAUC,MAAMC,WACvB2C,WAAY7C,IAAUC,MAAMC,WAC5BC,cAAeH,IAAUI,KAAKF,cAIlC4C,MAAQ,CACJlD,MAAM,GACNiD,WAAW,MAGfE,YAAc,SAACnD,GACXoD,EAAKC,SAAS,CAACrD,MAAOA,EAAMsD,YAOhCC,YAAc,SAAA5B,GACV,IAAM3B,EAAQ2B,EAAMC,OAAOV,MAC3BkC,EAAKC,SAAU,CAACrD,UAEbA,GACCwD,EAAgBxD,EAAMsD,QAAQ1D,KAAM,SAAAM,GAG3BA,EAAMc,OAAS,EAEhBoC,EAAKC,SAAS,CAAEJ,WAAY/C,IAG5BkD,EAAKC,SAAS,CAACJ,WAAY,gFAMnC,IAAAxC,EAE2BC,KAAKC,MAA7BJ,EAFHE,EAEGF,cAAeL,EAFlBO,EAEkBP,MACd+C,EAAcvC,KAAKwC,MAAnBD,WAIR,OAFAA,EAAWQ,KAAKC,IAAO,UAGnBtC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACXJ,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAMnC,UAAY,eAAeoC,GAAG,KAApC,SAGAxC,EAAAC,EAAAC,cAAA,OAAKE,UAAY,8BACbJ,EAAAC,EAAAC,cAAA,SAAQuC,KAAO,OACPC,YAAa,mCACb5C,MAASR,KAAKwC,MAAMlD,MACpB0B,SAAYhB,KAAK6C,YACjBQ,WAAc,MAK9Bd,EAAWjC,OAAS,GACpBI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBAEXJ,EAAAC,EAAAC,cAAA,iCAAAnC,OAA4B8D,EAAWjC,OAAvC,WACII,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACRyB,EAAWP,IAAK,SAAA1D,GAAI,OAElBoC,EAAAC,EAAAC,cAAA,OAAKC,IAAKvC,EAAKI,IACXgC,EAAAC,EAAAC,cAACuB,EAAD,CAAQ7D,KAAMA,EAAMkB,MAAOA,EAAOqB,IAAKvC,EAAKI,GAAImB,cAAeA,kBA7E/EuB,aC0ETkC,6MAlEX5D,UAAU,CACNF,MAAOE,IAAUC,MAAMC,WACvB2D,YAAa7D,IAAUI,KAAKF,cAMhC4C,MAAQ,CACJhD,MAAO,MAUX+D,YAAc,SAAEC,EAAYjF,GACxBuE,EAAiBU,EAAYjF,GAAOW,KAAM,SAAAK,GAGtCiE,EAAWjF,MAAQA,EAGnBmE,EAAKC,SAAU,SAACc,GAAD,MAAgB,CAC3BjE,MAAOiE,EAAUjE,MAGhB0C,OAAO,SAAA5D,GAAI,OACRA,EAAKI,KAAO8E,EAAW9E,KAE1BD,OAAO+E,4FApBD,IAAAE,EAAA1D,KACfA,KAAKR,MNTXhB,MAAK,GAAAC,OAAId,EAAJ,UAAiB,CAAEO,YACrBgB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAK,GAAI,OAAIA,EAAKC,QMOgBN,KAAM,SAACM,GAClCkE,EAAKf,SAAS,CAAEnD,6CAwBhB,IAAAmE,EAAA3D,KAEIR,EAAUQ,KAAKwC,MAAfhD,MAER,OACIkB,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAC1BrD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoD,EAAD,CAAaxE,MAAOA,EAAOK,cAAe8D,EAAKJ,cAC/C7C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAMC,GAAG,cACLxC,EAAAC,EAAAC,cAAA,qBAMhBF,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,KAAK,aAAaE,OAAU,kBAC/BrD,EAAAC,EAAAC,cAACqD,EAAD,CAAWzE,MAAOA,EAAOK,cAAe8D,EAAKJ,0BAhEnDnC,mBCFlB8C,IAASH,OACLrD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,KACIzD,EAAAC,EAAAC,cAACwD,EAAD,OAEJC,SAASC,eAAe","file":"static/js/main.2273b312.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass BookHandler extends Component {\r\n   \r\n    /**\r\n     * @PropTypes\r\n     * @Props: book, books, onChangeShelf\r\n    */\r\n    PropTypes = {\r\n        book: PropTypes.array.isRequired,\r\n        books: PropTypes.array.isRequired,\r\n        onChangeShelf: PropTypes.func.isRequired,\r\n    }\r\n\r\n    render(){\r\n        const { book, books, onChangeShelf } = this.props\r\n        \r\n        //defining 'move' as a default shelf so that I can omit this option on books that aren't on a shelf\r\n        //If I define as 'none' these books will assume the \"currentlyReading\" as a default shelf and user \r\n        //will be unable to select the currentReading rigth away.\r\n        let currentShelf = 'move'\r\n\r\n        for ( let [ , value] of Object.entries(books) ){\r\n            //console.log(value.id)\r\n            if ( value.id === book.id ){\r\n                //console.log('on shelf', value.shelf)\r\n                currentShelf = value.shelf\r\n            }  \r\n        }\r\n\r\n        return(\r\n            <div key={book.id}>\r\n                <div className='book-shelf-changer' >\r\n                <div className='menu-list'>\r\n                    <select className='menu-list-items' defaultValue={currentShelf} onChange={ event => onChangeShelf( book, event.target.value )}>\r\n                        <option value=\"move\" disabled>Move to...</option>\r\n                        <option value=\"currentlyReading\" >Currently Reading</option>\r\n                        <option value=\"wantToRead\"  >Want to Read</option>\r\n                        <option value=\"read\"  >Read</option>\r\n                        { \r\n                            // if the book is not on shelf then the 'remove' option should be omitted\r\n                            currentShelf !== \"move\" &&\r\n                            <option value=\"none\"  >Remove</option> \r\n                        }\r\n                    </select>\r\n                    {\r\n                        //loging books values to ensure that it has only books that are already in a shelf\r\n                        //console.log(books)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default BookHandler","import React , {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport BookHandler from './BookHandler';\r\n\r\nclass Books extends Component {\r\n\r\n    /**\r\n     * @PropTypes\r\n     * @Props: book, books, onChangeShelf\r\n    */\r\n    PropTypes = {\r\n        book: PropTypes.array.isRequired,\r\n        books: PropTypes.array.isRequired,\r\n        onChangeShelf: PropTypes.func.isRequired,\r\n    }\r\n    \r\n    render() {\r\n\r\n        const { book , onChangeShelf} = this.props  //book from bookshelf\r\n        const {books} = this.props //books from Findbooks\r\n\r\n        //defines a default image for books that don't heve a cover\r\n        const bookCover = book.imageLinks ? book.imageLinks.thumbnail : 'http://i.imgur.com/sJ3CT4V.gif'\r\n        \r\n        return(\r\n            <li>\r\n                <div className='book'>\r\n                    <div className='book-top'>\r\n                    \r\n                        <div className='book-cover' style= {{\r\n                            backgroundImage: `url(${bookCover})`\r\n                        }}/>\r\n                        <BookHandler book={book} books={books} onChangeShelf={onChangeShelf}/>\r\n                    </div>\r\n                    <div className=\"book-title\">{book.title}</div>\r\n                    <div className=\"book-authors\">{book.authors}</div>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Books\r\n","import React , {Component} from 'react'\r\nimport Books from './Books'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Bookshelf extends Component {\r\n\r\n    /**\r\n     * @PropTypes\r\n     * @Props: books, onChangeShelf\r\n    */\r\n    PropTypes = {\r\n        books: PropTypes.array.isRequired,\r\n        onChangeShelf: PropTypes.func.isRequired,\r\n    }\r\n        \r\n    render(){\r\n\r\n        let shelfLable = [\r\n            {shelf: 'currentlyReading', lable: 'Currently Reading' },\r\n            {shelf: 'wantToRead', lable: 'Want to Read' },\r\n            {shelf: 'read', lable: 'Already Read' }\r\n        ]\r\n\r\n        const { books, onChangeShelf } =  this.props\r\n        \r\n        return (\r\n            <div>\r\n                {shelfLable.map ( (shelf, index) => \r\n                    <div className=\"bookshelf\" key={index}>\r\n                        <div>\r\n                            <h2 className=\"bookshelf-title\"> {shelf.lable} </h2>   \r\n                            <div className=\"bookshelf-books\"> \r\n                                <ol className='books-grid'>\r\n                                    {books\r\n                                        .filter( (book) => book.shelf === shelf.shelf)\r\n                                        .map( (book) => \r\n                                            <div key={book.id}>\r\n                                                <Books \r\n                                                    books={books}\r\n                                                    book={book}\r\n                                                    key={book.id}\r\n                                                    onChangeShelf={onChangeShelf} \r\n                                                />\r\n                                            </div>\r\n                                    )}\r\n                                </ol>\r\n                            </div>\r\n                        </div>\r\n                    </div>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bookshelf    ","import React , {Component} from 'react'\r\nimport Bookshelf from './Bookshelf'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Bookshelves extends Component {\r\n\r\n    /**\r\n     * @PropTypes\r\n     * @Props: books, onChangeShelf\r\n    */\r\n    PropTypes = {\r\n        books: PropTypes.array.isRequired,\r\n        onChangeShelf: PropTypes.func.isRequired,\r\n    }\r\n    \r\n    render(){\r\n    \r\n        const { books, onChangeShelf } = this.props\r\n\r\n        return(\r\n            <div>\r\n                <div className='list-books'>\r\n                    <div className='list-books-title'> \r\n                        <h1>MyReads</h1>\r\n                    </div>\r\n                    <div className='list-books-content'>\r\n                        <Bookshelf books={books} onChangeShelf={onChangeShelf}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )   \r\n    }\r\n}\r\n\r\nexport default Bookshelves","import React, {Component} from 'react'\r\nimport * as BooksAPI from '../utils/BooksAPI'\r\nimport {Link} from 'react-router-dom'\r\nimport Books from './Books';\r\nimport PropTypes from 'prop-types'\r\nimport sortBy from 'sort-by'\r\n\r\nclass FindBooks extends Component{\r\n\r\n    /**\r\n     * @PropTypes\r\n     * @Props: books, booksToAdd, onChangeShelf\r\n    */\r\n    PropTypes = {\r\n        books: PropTypes.array.isRequired,\r\n        booksToAdd: PropTypes.array.isRequired,\r\n        onChangeShelf: PropTypes.func.isRequired,\r\n    }\r\n\r\n    //@state\r\n    state = {\r\n        query:'',\r\n        booksToAdd:[],\r\n    }\r\n\r\n    updateQuery = (query) => {\r\n        this.setState({query: query.trim()})\r\n    }\r\n\r\n    /**\r\n     * @func: searchBooks\r\n     * @param: event\r\n    */\r\n    searchBooks = event => {\r\n        const query = event.target.value\r\n        this.setState ({query})\r\n\r\n        if(query) {\r\n            BooksAPI.search(query.trim()).then( books => {\r\n                //cheking if 'books' returns any entry\r\n                //console.log(books)\r\n                if ( books.length > 0 ) {\r\n                    \r\n                    this.setState({ booksToAdd: books })    \r\n                   \r\n                } else {\r\n                    this.setState({booksToAdd: []})\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        const {onChangeShelf, books} = this.props\r\n        const { booksToAdd} = this.state\r\n        \r\n        booksToAdd.sort(sortBy('title'))\r\n\r\n        return(\r\n            <div>\r\n                <div className='search-books'>\r\n                    <div className='search-books-bar'>\r\n                        <Link className = 'close-search' to='/' > \r\n                            Close\r\n                        </Link>\r\n                        <div className = 'search-books-input-wrapper'>\r\n                            <input  type = 'text'\r\n                                    placeholder= 'Whant new books to your shelves?'\r\n                                    value= { this.state.query }\r\n                                    onChange= { this.searchBooks }\r\n                                    autoFocus = { true }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    { \r\n                    booksToAdd.length > 0 &&\r\n                    <div className='search-books-results'>\r\n                    \r\n                        <h3>{`Search has returned ${booksToAdd.length} books`}</h3>\r\n                            <ol className=\"books-grid\">\r\n                                { booksToAdd.map( book => \r\n                                    \r\n                                    <div key={book.id}>\r\n                                        <Books  book={book} books={books} key={book.id} onChangeShelf={onChangeShelf}\r\n                                    />\r\n                                    </div>    \r\n                                )}\r\n                            </ol>\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )   \r\n    }\r\n}\r\n\r\n\r\nexport default FindBooks","import React, {Component} from 'react'\r\nimport * as BooksAPI from './utils/BooksAPI'\r\nimport Bookshelves from './components/Bookshelves'\r\nimport {Link} from 'react-router-dom'\r\nimport {Route} from 'react-router-dom'\r\nimport './App.css'\r\nimport FindBooks from './components/FindBooks'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass App extends Component {\r\n\r\n\r\n    /**\r\n     * @Props: books, moveToShelf\r\n     */\r\n    PropTypes={\r\n        books: PropTypes.array.isRequired,\r\n        moveToShelf: PropTypes.func.isRequired\r\n    }\r\n\r\n    /**\r\n     * @state: books\r\n     */\r\n    state = {\r\n        books: [],\r\n    }\r\n \r\n    \r\n    componentDidMount(){\r\n        this.books = BooksAPI.getAll().then( (books) => {\r\n            this.setState({ books });\r\n        });\r\n    } \r\n\r\n    moveToShelf = ( targetBook, shelf ) => {\r\n        BooksAPI.update( targetBook, shelf).then( data  => { \r\n\r\n            //gives the book a new shelf value\r\n            targetBook.shelf = shelf\r\n            \r\n            //updating  books state\r\n            this.setState( (prevState) => ({\r\n                books: prevState.books\r\n                \r\n                //generate a new array with books which its id is different from the targetBook's id\r\n                .filter(book => \r\n                    book.id !== targetBook.id)\r\n                //update the array adding targetBook so that home page re-renders incluind it on its proper shelf\r\n                .concat(targetBook)\r\n                }) \r\n            )\r\n        })\r\n    }\r\n      \r\n    render(){\r\n    \r\n        const { books } = this.state\r\n\r\n        return(\r\n            <div>\r\n                {<div>\r\n                    <Route path='/' exact render={() => \r\n                        <div> \r\n                            <Bookshelves books={books} onChangeShelf={this.moveToShelf}/>\r\n                            <div className=\"open-search\">\r\n                                <Link to='/findbooks'>\r\n                                    <button />\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    }/>\r\n\r\n                    <Route path='/findbooks' render= { () => \r\n                        <FindBooks books={books} onChangeShelf={this.moveToShelf}/>\r\n                    }/> \r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>, \r\n    document.getElementById('root'))\r\n"],"sourceRoot":""}